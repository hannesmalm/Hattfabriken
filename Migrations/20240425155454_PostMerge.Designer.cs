// <auto-generated />
using System;
using Hattfabriken.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hattfabriken.Migrations
{
    [DbContext(typeof(HatDbContext))]
    [Migration("20240425155454_PostMerge")]
    partial class PostMerge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hattfabriken.Models.Customer", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Hattfabriken.Models.Hat", b =>
                {
                    b.Property<int>("HatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HatId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HatImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("HatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialCost")
                        .HasColumnType("float");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OuterMeasurement")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("SpecialEffectCost")
                        .HasColumnType("float");

                    b.Property<string>("SpecialEffects")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HatId");

                    b.HasIndex("MaterialName");

                    b.ToTable("Hats");

                    b.HasData(
                        new
                        {
                            HatId = 1,
                            Description = "A timeless choice for any formal occasion.",
                            HatName = "Classic Fedora",
                            HatType = "Fedora",
                            MaterialCost = 2000.0,
                            MaterialName = "Leather",
                            OuterMeasurement = 58,
                            Quantity = 120,
                            SpecialEffectCost = 0.0,
                            SpecialEffects = "None"
                        },
                        new
                        {
                            HatId = 2,
                            Description = "Perfect for a sunny day out in the park or at the beach.",
                            HatName = "Summer Straw Hat",
                            HatType = "Panama",
                            MaterialCost = 1500.0,
                            MaterialName = "Straw",
                            OuterMeasurement = 56,
                            Quantity = 85,
                            SpecialEffectCost = 50.0,
                            SpecialEffects = "Ribbon"
                        },
                        new
                        {
                            HatId = 3,
                            Description = "Ideal for weddings and formal evening events.",
                            HatName = "Elegant Top Hat",
                            HatType = "Top Hat",
                            MaterialCost = 3000.0,
                            MaterialName = "Felt",
                            OuterMeasurement = 60,
                            Quantity = 40,
                            SpecialEffectCost = 100.0,
                            SpecialEffects = "Silk Band"
                        },
                        new
                        {
                            HatId = 4,
                            Description = "A casual wear staple, perfect for outdoor activities.",
                            HatName = "Casual Baseball Cap",
                            HatType = "Baseball Cap",
                            MaterialCost = 800.0,
                            MaterialName = "Cotton",
                            OuterMeasurement = 57,
                            Quantity = 200,
                            SpecialEffectCost = 30.0,
                            SpecialEffects = "Embroidery"
                        },
                        new
                        {
                            HatId = 5,
                            Description = "A touch of the 1920s style to grace any sophisticated look.",
                            HatName = "Vintage Cloche",
                            HatType = "Cloche",
                            MaterialCost = 2500.0,
                            MaterialName = "Felt",
                            OuterMeasurement = 55,
                            Quantity = 60,
                            SpecialEffectCost = 45.0,
                            SpecialEffects = "Cloth Flower"
                        });
                });

            modelBuilder.Entity("Hattfabriken.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Hattfabriken.Models.Material", b =>
                {
                    b.Property<string>("MaterialName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialHsCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("MaterialSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("MaterialName");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialName = "Leather",
                            MaterialHsCode = "4202 91 80 10",
                            MaterialQuantity = 1000,
                            MaterialSupplier = "Leather@gmail.com",
                            Price = 4500
                        },
                        new
                        {
                            MaterialName = "Straw",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 800,
                            MaterialSupplier = "StrawSwag@icloud.com",
                            Price = 1400
                        },
                        new
                        {
                            MaterialName = "Cloth",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 2200,
                            MaterialSupplier = "ClothCircus@hotmail.com",
                            Price = 1300
                        },
                        new
                        {
                            MaterialName = "Snakeskin",
                            MaterialHsCode = "4202 91 80 10",
                            MaterialQuantity = 400,
                            MaterialSupplier = "SnakeKiller@icloud.com",
                            Price = 8400
                        },
                        new
                        {
                            MaterialName = "Felt",
                            MaterialHsCode = "4202 91 80 10",
                            MaterialQuantity = 600,
                            MaterialSupplier = "FeltFear@icloud.com",
                            Price = 1400
                        },
                        new
                        {
                            MaterialName = "Panama",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 900,
                            MaterialSupplier = "PanamaSwag@icloud.com",
                            Price = 1600
                        },
                        new
                        {
                            MaterialName = "Cotton",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 200,
                            MaterialSupplier = "CottonCorner@icloud.com",
                            Price = 1600
                        },
                        new
                        {
                            MaterialName = "Linen",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 300,
                            MaterialSupplier = "GrischLaidback@icloud.com",
                            Price = 2800
                        },
                        new
                        {
                            MaterialName = "Satin",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 1000,
                            MaterialSupplier = "SatinSwag@icloud.com",
                            Price = 1200
                        },
                        new
                        {
                            MaterialName = "Polyester",
                            MaterialHsCode = "6501 00 10 00",
                            MaterialQuantity = 2900,
                            MaterialSupplier = "PolyesterChina@icloud.com",
                            Price = 1100
                        });
                });

            modelBuilder.Entity("Hattfabriken.Models.Offer", b =>
                {
                    b.Property<int>("OffertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffertId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("HatImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("HatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HatmakerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialCost")
                        .HasColumnType("float");

                    b.Property<int>("Measurement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OuterMeasurement")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<double?>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<string>("SpecialEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SpecialEffectCost")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<bool>("Urgent")
                        .HasColumnType("bit");

                    b.HasKey("OffertId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Hattfabriken.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("HatImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("HatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Maker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialCost")
                        .HasColumnType("float");

                    b.Property<int?>("Measurement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<double?>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<double?>("SpecialEffectCost")
                        .HasColumnType("float");

                    b.Property<string>("SpecialEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Urgent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Elm Street",
                            Commentary = "Black color, classic style",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer1@example.com",
                            EstimatedDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Fedora",
                            Height = 15,
                            Material = "Leather",
                            MaterialCost = 5000.0,
                            Measurement = 58,
                            Name = "John Doe",
                            PhoneNumber = "123-456-7890",
                            PostalCode = 10001,
                            ShippingCost = 200.0,
                            SpecialEffectCost = 50.0,
                            SpecialEffects = "Feathers",
                            Status = "To-Do",
                            Urgent = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak Street",
                            Commentary = "Lightweight for summer",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer2@example.com",
                            EstimatedDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Trilby",
                            Height = 12,
                            Material = "Straw",
                            MaterialCost = 3000.0,
                            Measurement = 57,
                            Name = "Jane Smith",
                            PhoneNumber = "987-654-3210",
                            PostalCode = 10002,
                            ShippingCost = 150.0,
                            SpecialEffectCost = 40.0,
                            SpecialEffects = "Lace",
                            Status = "To-Do",
                            Urgent = true
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Birch Street",
                            Commentary = "For sports and casual wear",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer3@example.com",
                            EstimatedDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Baseball Cap",
                            Height = 10,
                            Material = "Cotton",
                            MaterialCost = 1500.0,
                            Measurement = 56,
                            Name = "Alice Blue",
                            PhoneNumber = "321-456-9870",
                            PostalCode = 10003,
                            ShippingCost = 100.0,
                            SpecialEffectCost = 20.0,
                            SpecialEffects = "Polished Paper",
                            Status = "To-Do",
                            Urgent = false
                        },
                        new
                        {
                            Id = 4,
                            Address = "246 Pine Street",
                            Commentary = "Elegant and stylish",
                            Country = "Sweden",
                            Delivery = false,
                            Email = "customer4@example.com",
                            EstimatedDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Beret",
                            Height = 10,
                            Material = "Felt",
                            MaterialCost = 4500.0,
                            Measurement = 59,
                            Name = "Betty White",
                            PhoneNumber = "654-321-4567",
                            PostalCode = 10004,
                            ShippingCost = 95.0,
                            SpecialEffectCost = 70.0,
                            SpecialEffects = "Pearls",
                            Status = "To-Do",
                            Urgent = true
                        },
                        new
                        {
                            Id = 5,
                            Address = "135 Maple Street",
                            Commentary = "Vintage look",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer5@example.com",
                            EstimatedDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Cloche",
                            Height = 12,
                            Material = "Wool",
                            MaterialCost = 4000.0,
                            Measurement = 55,
                            Name = "Carol King",
                            PhoneNumber = "852-753-9514",
                            PostalCode = 10005,
                            ShippingCost = 85.0,
                            SpecialEffectCost = 35.0,
                            SpecialEffects = "Cloth Flowers",
                            Status = "To-Do",
                            Urgent = false
                        },
                        new
                        {
                            Id = 6,
                            Address = "369 Willow Street",
                            Commentary = "Perfect for the beach",
                            Country = "Sweden",
                            Delivery = false,
                            Email = "customer6@example.com",
                            EstimatedDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Panama",
                            Height = 12,
                            Material = "Panama",
                            MaterialCost = 3200.0,
                            Measurement = 60,
                            Name = "Dave Rich",
                            PhoneNumber = "456-789-0123",
                            PostalCode = 10006,
                            ShippingCost = 110.0,
                            SpecialEffectCost = 40.0,
                            SpecialEffects = "Lace",
                            Status = "To-Do",
                            Urgent = true
                        },
                        new
                        {
                            Id = 7,
                            Address = "987 Cedar Street",
                            Commentary = "Casual and comfy",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer7@example.com",
                            EstimatedDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Bucket Hat",
                            Height = 10,
                            Material = "Linen",
                            MaterialCost = 2700.0,
                            Measurement = 58,
                            Name = "Eva Storm",
                            PhoneNumber = "789-012-3456",
                            PostalCode = 10007,
                            ShippingCost = 80.0,
                            SpecialEffectCost = 90.0,
                            SpecialEffects = "Fake Fur",
                            Status = "To-Do",
                            Urgent = false
                        },
                        new
                        {
                            Id = 8,
                            Address = "654 Spruce Street",
                            Commentary = "Retro style",
                            Country = "Sweden",
                            Delivery = false,
                            Email = "customer8@example.com",
                            EstimatedDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Newsboy Cap",
                            Height = 13,
                            Material = "Polyester",
                            MaterialCost = 2800.0,
                            Measurement = 57,
                            Name = "Fred Quest",
                            PhoneNumber = "951-753-8524",
                            PostalCode = 10008,
                            ShippingCost = 90.0,
                            SpecialEffectCost = 20.0,
                            SpecialEffects = "Polished Paper",
                            Status = "To-Do",
                            Urgent = true
                        },
                        new
                        {
                            Id = 9,
                            Address = "321 Birch Street",
                            Commentary = "Elegant evening wear",
                            Country = "Sweden",
                            Delivery = true,
                            Email = "customer9@example.com",
                            EstimatedDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Top Hat",
                            Height = 20,
                            Material = "Satin",
                            MaterialCost = 4900.0,
                            Measurement = 59,
                            Name = "Gina Gold",
                            PhoneNumber = "123-987-6543",
                            PostalCode = 10009,
                            ShippingCost = 125.0,
                            SpecialEffectCost = 70.0,
                            SpecialEffects = "Pearls",
                            Status = "To-Do",
                            Urgent = false
                        },
                        new
                        {
                            Id = 10,
                            Address = "852 Oak Lane",
                            Commentary = "Classic derby style",
                            Country = "Sweden",
                            Delivery = false,
                            Email = "customer10@example.com",
                            EstimatedDate = new DateTime(2024, 5, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            HatType = "Derby",
                            Height = 14,
                            Material = "Cloth",
                            MaterialCost = 3500.0,
                            Measurement = 56,
                            Name = "Harry Hatt",
                            PhoneNumber = "321-654-9876",
                            PostalCode = 10010,
                            ShippingCost = 100.0,
                            SpecialEffectCost = 15.0,
                            SpecialEffects = "Lurex Thread",
                            Status = "To-Do",
                            Urgent = true
                        });
                });

            modelBuilder.Entity("Hattfabriken.Models.QuantityRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialName");

                    b.ToTable("QuantityRequests");
                });

            modelBuilder.Entity("Hattfabriken.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Measurement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OuterMeasurement")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<byte[]>("RequestImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SpecialEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Urgent")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Hattfabriken.Models.SpecialEffects", b =>
                {
                    b.Property<string>("SpecialEffectName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SpecialEffectName");

                    b.ToTable("SpecialEffects");

                    b.HasData(
                        new
                        {
                            SpecialEffectName = "Feathers",
                            Price = 50.00m
                        },
                        new
                        {
                            SpecialEffectName = "Cloth Flowers",
                            Price = 35.00m
                        },
                        new
                        {
                            SpecialEffectName = "Pearls",
                            Price = 70.00m
                        },
                        new
                        {
                            SpecialEffectName = "Lace",
                            Price = 40.00m
                        },
                        new
                        {
                            SpecialEffectName = "Polished Paper",
                            Price = 20.00m
                        },
                        new
                        {
                            SpecialEffectName = "Lurex Thread",
                            Price = 15.00m
                        },
                        new
                        {
                            SpecialEffectName = "Fake Fur",
                            Price = 90.00m
                        });
                });

            modelBuilder.Entity("Hattfabriken.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5a8b032b-11ba-4a8e-9c33-e1c368096503",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c9c1837-27c5-4642-b718-1955007cb716",
                            Email = "otto@hattfabriken.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OTTO@HATTFABRIKEN.COM",
                            NormalizedUserName = "OTTO@HATTFABRIKEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8gwwBgGnaggwNpQy0jfE5onMXjpfeu7gTH9F2DeOZ8ZPgPD8dTFpcMB4/f4wMx1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21e970eb-4ef8-488a-917f-ceb42d86243a",
                            TwoFactorEnabled = false,
                            UserName = "otto@hattfabriken.com"
                        },
                        new
                        {
                            Id = "0bdb20fe-233a-411e-bea3-a76e09917e0f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7c891de-0c39-4942-8f38-34444342ce98",
                            Email = "judith@hattfabriken.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDITH@HATTFABRIKEN.COM",
                            NormalizedUserName = "JUDITH@HATTFABRIKEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJnRf7u0vddvu40ivH8rZtTBA6o58o8xK4nQ3PS5W1PDmxQRe0bhxYolwtgt/1N1tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9810ce7-688d-4d3f-95f7-de6ff28bb380",
                            TwoFactorEnabled = false,
                            UserName = "judith@hattfabriken.com"
                        });
                });

            modelBuilder.Entity("Hattfabriken.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quanitity")
                        .HasColumnType("int");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hattfabriken.Models.Hat", b =>
                {
                    b.HasOne("Hattfabriken.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Hattfabriken.Models.QuantityRequest", b =>
                {
                    b.HasOne("Hattfabriken.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hattfabriken.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hattfabriken.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hattfabriken.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hattfabriken.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
